<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Robin Thrift</title>
    <link>https://robinthrift.com/post/index.xml</link>
    <description>Recent content in Posts on Robin Thrift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/RobinThrift&#34;&gt;Robin Thrift&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Sun, 24 Apr 2016 00:00:00 +0100</lastBuildDate>
    <atom:link href="https://robinthrift.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Weekly Picks No. 6</title>
      <link>https://robinthrift.com/post/weekly-picks-no-6/</link>
      <pubDate>Sun, 24 Apr 2016 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/weekly-picks-no-6/</guid>
      <description>&lt;p&gt;These are programming and non-programming things I found interesting this past week (18.04.16 - 24.04.16):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://robots.thoughtbot.com/rolling-random-romans&#34;&gt;Rolling Random Romans&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/joelquen&#34;&gt;Joël Quenneville&lt;/a&gt;: Excellent little tutorial on Elm.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://slackhq.com/launching-mission-control-day-part-1-a6053adbd522&#34;&gt;Launching Mission Control Day (part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Weekly Picks No. 5</title>
      <link>https://robinthrift.com/post/weekly-picks-no-5/</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/weekly-picks-no-5/</guid>
      <description>&lt;p&gt;These are programming and non-programming things I found interesting this past week (11.04.16 - 17.04.16):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.over-yonder.net/~fullermd/rants/bsd4linux/01&#34;&gt;BSD for Linux Users&lt;/a&gt;: Although a bit dated, it&amp;rsquo;s still an excellent essay by Matt Fuller on the differences both on the technical and philosophical aspects of BSDs and Linux.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md&#34;&gt;Passive event listeners&lt;/a&gt;: a new DOM API proposal that should help with performance when using scroll handlers (especially on mobile).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arstechnica.com/gaming/2016/04/table-for-two-our-favorite-two-player-board-games-2/&#34;&gt;Table for two: Our favorite two-player board games onby Aaron Zimmerman on Ars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Weekly Picks No. 4</title>
      <link>https://robinthrift.com/post/weekly-picks-no-4/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/weekly-picks-no-4/</guid>
      <description>&lt;p&gt;These are programming and non-programming things I found interesting this past week (28.03.16 - 03.04.16):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This should totally be a thing: &lt;a href=&#34;https://twitter.com/davechenell/status/710549108692541440&#34;&gt;https://twitter.com/davechenell/status/710549108692541440&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/&#34;&gt;String Types in Rust&lt;/a&gt; by Andrew Brinker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/s3git/s3git&#34;&gt;S3Git&lt;/a&gt; is &amp;ldquo;git for Cloud Storage&amp;rdquo;, a clever little tool, that allows one to easily sync files with &amp;ldquo;distributed, decentralized and versioned repositories&amp;rdquo;. It uses the &lt;em&gt;BLAKE2 Tree Hashing&lt;/em&gt; Algorithm for both deduplicated and hydrated storage&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wekan.io/&#34;&gt;Wekan&lt;/a&gt;: I&amp;rsquo;ve been using Wekan for a while now, and absolutely love it. It&amp;rsquo;s essentially a Trello clone, but that&amp;rsquo;s not a bad thing, as it has the distinct advantage, that you can host it yourself. I use it for all my side projects and it has helped me massively.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Weekly Picks No. 3</title>
      <link>https://robinthrift.com/post/weekly-picks-no-3/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/weekly-picks-no-3/</guid>
      <description>&lt;p&gt;These are programming and non-programming things I found interesting this past week (25.01.16 - 31.01.16) and why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zeithq/micro&#34;&gt;github.com/zeithq/micro&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Very intersting micro services library with a beautifully minimalistic API. An excellent example for good APIs.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/typescript/archive/2016/01/28/announcing-typescript-1-8-beta.aspx&#34;&gt;Typescript 1.8 Beta&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m a huge fan of Typescript and the 1.8 release will make it even better, allowing for easier JS and TS interop. I&amp;rsquo;m looking forward to using it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AlessandroYorba/Alduin&#34;&gt;Alduin Colourscheme&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve been using &lt;a href=&#34;http://chriskempson.github.io/base16/#ocean&#34;&gt;base16-ocean (light and dark)&lt;/a&gt; up until now, but I instantly fell in love with this colourscheme, and am now using it both for my terminal as well as vim.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://robinthrift.com/content/images/2016/03/alduin.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jadpole.github.io/arcaders/arcaders-1-0/&#34;&gt;ArcadeRS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;An excellent and very detailed tutorial on how to write a game in Rust and generally a great Rust intro.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/developit/preact&#34;&gt;preact&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;⚡️ Fast 3kb React alternative with the same ES6 API. Components &amp;amp; Virtual DOM&amp;rdquo;. Looks very promising and with TS 1.8&amp;rsquo;s new option &lt;code&gt;--reactNamespac&lt;/code&gt; this can even be used in TS withough much pain.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Weekly Picks No. 2</title>
      <link>https://robinthrift.com/post/weekly-picks-no-2/</link>
      <pubDate>Sun, 20 Dec 2015 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/weekly-picks-no-2/</guid>
      <description>&lt;p&gt;These are programming and non-programming things I found interesting this past week (14.12.15 - 20.12.15) and why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intel NUC

&lt;ul&gt;
&lt;li&gt;I bought this little barebones PC along with a 120GB SSD and 8GB RAM to be used as a simple home server. So far, I have nothing but good things to say about this little machine. Installing Ubuntu Server 14.04 LTS went without a hitch and Docker runs like a charm. It can easly handle anything I throw at it. The only thing I haven&amp;rsquo;t tried so far is running a CI Server, but I&amp;rsquo;m sure it&amp;rsquo;ll do just fine.&lt;/li&gt;
&lt;li&gt;Amazon &lt;a href=&#34;http://www.amazon.com/Intel-NUC5i3RYH-Core-120GB-BOXNUC5i3RYH/dp/B00TG6GOVI/ref=sr_1_fkmr1_2?ie=UTF8&amp;amp;qid=1450617696&amp;amp;sr=8-2-fkmr1&amp;amp;keywords=Intel+BB+NUC5i3RYH&#34;&gt;US&lt;/a&gt; | &lt;a href=&#34;http://www.amazon.co.uk/Intel-Computing-NUC5i3RYH-Barebone-PC/dp/B00S1IQHKK/ref=sr_1_1?ie=UTF8&amp;amp;qid=1450617724&amp;amp;sr=8-1&amp;amp;keywords=intel+nuc+NUC5i3RYH&#34;&gt;UK&lt;/a&gt; | &lt;a href=&#34;http://www.amazon.de/gp/product/B00S1IQHKK?psc=1&amp;amp;redirect=true&amp;amp;ref_=oh_aui_detailpage_o03_s00&#34;&gt;DE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Chocolate Coated Coffee Beans

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m no coffee expert but I do like a nice, richt, earthy coffee, and after hearing about these, I had to try them, and I like them a lot.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://orientdb.com/orientdb/&#34;&gt;Orient DB&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve been thinking a lot about databases recently, and how we usually store our data. I&amp;rsquo;ve been looking at graph data bases and NoSQL, and this one cought my eye. I will keep a close eye on this one.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test Runners:

&lt;ul&gt;
&lt;li&gt;In recent weeks I&amp;rsquo;ve been working on our testing infrastructure at work. I think there&amp;rsquo;s a lot of room for innovation in test runner in the JS world, specifically when looking at integration tests and running tests decoupled from the system that is initiating the tests, i. e. on an iPhone Simulator for React Native. &lt;a href=&#34;https://github.com/sindresorhus/ava&#34;&gt;Ava&lt;/a&gt; is very interesting but only
deals with the problem of concurrency.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fetching Data (SPAs):

&lt;ul&gt;
&lt;li&gt;While systems like GraphQL and Netflix&amp;rsquo;s Falcor are interesting, they&amp;rsquo;re not the end-all-solution. &lt;a href=&#34;https://engineering.heroku.com/blogs/2015-12-16-react-refetch/&#34;&gt;react-refetch&lt;/a&gt; is an interesting approach, however still doesn&amp;rsquo;t quite satisfy my needs&amp;hellip; I guess some more thinking and tinkering is required&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, I found them this week, it does not mean they are new this week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weekly Picks No. 1</title>
      <link>https://robinthrift.com/post/weekly-picks-no-1/</link>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/weekly-picks-no-1/</guid>
      <description>&lt;p&gt;These are programming and non-programming things I found interesting this past week (10.11.14 - 23.11.14) and why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-examples.tumblr.com/&#34;&gt;Golang Examples&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Learning a new language, and especially one with so many interesting features, is difficult without good examples.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reimertz/gyver&#34;&gt;Gyver&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A clever little tool that helps you organize your thoughts and ideas or just gives you inspiration.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Little-Secret-Nikki-Yanofsky/dp/B00N63SU96/ref=sr_1_1?s=dmusic&amp;amp;ie=UTF8&amp;amp;qid=1416313842&amp;amp;sr=1-1&amp;amp;keywords=Little+Secret&#34;&gt;Little Secret by Nikki Yanofsky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, I found them this week, it does not mean they are new this week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HannoverJS August: Metalsmith Talk</title>
      <link>https://robinthrift.com/post/hannoverjs-august-metalsmith-talk/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/hannoverjs-august-metalsmith-talk/</guid>
      <description>&lt;p&gt;I gave a little introductory talk about &lt;a href=&#34;http://metalsmith.io&#34;&gt;Metalsmith&lt;/a&gt; at last month&amp;rsquo;s &lt;a href=&#34;http://hannoverjs.de&#34;&gt;HannoverJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the slides here:
- &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-presentation-slides&#34;&gt;Source&lt;/a&gt;
- &lt;a href=&#34;http://robinthrift.github.io/metalsmith-presentation-slides/&#34;&gt;Presentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metalsmith Part 3: Refining Our Tools</title>
      <link>https://robinthrift.com/post/metalsmith-part-3-refining-our-tools/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/metalsmith-part-3-refining-our-tools/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://robinthrift.com/post/metalsmith-part-2-shaping-the-metal/&#34;&gt;Last time&lt;/a&gt; we took a dive into collections and Metalsmiths internals. This time we are going to refine our script and even develop our own little plugin.&lt;/p&gt;

&lt;p&gt;Without wasting any time, let&amp;rsquo;s get started!&lt;/p&gt;

&lt;h3 id=&#34;writing-plugins&#34;&gt;Writing Plugins&lt;/h3&gt;

&lt;p&gt;I am going to start this tutorial off with a little plugin, that will save us a time, and automate our build process further. In order to render our posts correctly, we have to set every posts template individually. As most posts will likely have the same template, this is a little unnecessary, and error prone. So let&amp;rsquo;s change that.&lt;/p&gt;

&lt;p&gt;Firstly a little reminder, how Metalsmith represents files internally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &#39;title&#39;: &#39;FROM_THE_TITLE_KEY&#39;,
    &#39;template&#39;: &#39;TEMPLATE_NAME&#39;,
    &#39;contents&#39;: &amp;lt;Buffer()&amp;gt;,
    &#39;mode&#39;: &#39;HEX_FILE_PERM_CODE&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Metalsmith passes an object with all the files to every function that is passed to &lt;code&gt;.use()&lt;/code&gt;. But that&amp;rsquo;s not all, Metalsmith also passes you the current Metalsmith instance and a function to call, when you&amp;rsquo;re done, so a full plugin would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var plugin = function(files, metalsmith, done) {
    console.log(files);
    done();
};

Metalsmith(__dirname)
    //...
    .use(plugin)
    //...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note--small&#34;&gt;The object keys represent the file path.&lt;/div&gt;

&lt;p&gt;As you can probably guess, this will simply log all the files to the console. Go ahead and try it, it will give you a feel about how Metalsmith works.&lt;/p&gt;

&lt;p&gt;Before we go on, we should modify out plugin to return a function. This allows us to pass the plugin a configuration object (and use it multiple times with different configs):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var findTemplate = function(config) {
    return function(files, metalsmith, done) {
        //...
        done();
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want our plugin to add a template key to our posts (if there is none), so we&amp;rsquo;ll need to filter out our posts first. We will do so, by looping over the files list and use a regular expression to check if the file is a post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var findTemplate = function(config) {
    var pattern = new RegExp(config.pattern);

    return function(files, metalsmith, done) {
        for (var file in files) {
            if (pattern.test(file)) {
                var _f = files[file];
                if (!_f.template) {
                    _f.template = config.templateName;
                }
            }
        }
        done();
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now use the plugin as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Metalsmith(__dirname)
    //...
    .use(findTemplate({
        pattern: &#39;posts&#39;,
        templateName: &#39;post.hbt&#39;
    }))
    //...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note--small&#34;&gt;Don&#39;t forget to remove the template key from your posts!&lt;/div&gt;

&lt;h4 id=&#34;metalsmith-metadata&#34;&gt;metalsmith.metadata()&lt;/h4&gt;

&lt;p&gt;As you can see by the example above, each plugin is also passed the current metalsmith instance. This allows you to pass around, or set, global metadata. This includes things like the collections we created in the last tutorial, but also configuration. There&amp;rsquo;s a plugin called &lt;a href=&#34;https://github.com/segmentio/metalsmith-metadata&#34;&gt;metalsmith-metadata&lt;/a&gt; that loads extra config data from a file. You could use this to set things like the base URL, similar to Jekyll&amp;rsquo;s &lt;code&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-note-error-handling&#34;&gt;A Note Error Handling&lt;/h4&gt;

&lt;p&gt;Metalsmith uses &lt;a href=&#34;https://github.com/segmentio/ware&#34;&gt;ware&lt;/a&gt; to allow for the nice chaining syntax, however, this also means we need to adapt our error handling. Firstly, if an error occurs, we shouldn&amp;rsquo;t just throw it, we should pass it to the &lt;code&gt;done()&lt;/code&gt; function as the first parameter. Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
done(new Error(&#39;Oh noes!&#39;));
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then catch the error in the &lt;code&gt;build()&lt;/code&gt; method. To do so, we pass it a callback, which first parameter will be the error, if any (the second parameter is a list of all the files):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
    .build(function(err) {
        if (err) { throw err; }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got that out of the way, let us continue improving our script!&lt;/p&gt;

&lt;h3 id=&#34;statics&#34;&gt;Statics&lt;/h3&gt;

&lt;p&gt;Most websites (even simple ones) will need some kind of static assets, like styles, scripts or fonts. We will get to preprocessing styles and scripts in a bit, but for now, we&amp;rsquo;ll assume that we are using good ol&amp;rsquo; CSS and plain, old, simple, non-fancy, unsexy, no-frills-no-spills, boring, not-named-after-a-beverage JavaScript.&lt;/p&gt;

&lt;p&gt;To copy over these &lt;em&gt;exciting&lt;/em&gt; files we will just add them to our &lt;code&gt;src/&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|– src/
    |– content/
    |– images/
    |– styles/
    |   |_ main.css
    |_ scripts/
        |_ main.js
|– templates/
|   |_ partials/
|– config.json
|– index.js
|_ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Metalsmith will copy the files over, including the file structure. Done. &lt;code&gt;next()&lt;/code&gt;!&lt;/p&gt;

&lt;h3 id=&#34;preprocessing&#34;&gt;Preprocessing&lt;/h3&gt;

&lt;p&gt;Now using plain CSS and JS is boring, SCSS and CoffeeScript are way more fun! At least, we&amp;rsquo;ll pretend for now, because that&amp;rsquo;s what we are going to set up now.
Firstly we will need to install the CS (&lt;a href=&#34;https://github.com/joaoafrmartins/metalsmith-coffee&#34;&gt;metalsmith-coffee&lt;/a&gt;) and SCSS (&lt;a href=&#34;https://github.com/stevenschobert/metalsmith-sass&#34;&gt;metalsmith-sass&lt;/a&gt;) plugins via npm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save-dev metalsmith-coffee metalsmith-sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then require them in your build script and add them to your chain (they will filter the files themselves):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
    .use(sass({
        outputStyle: &#39;compressed&#39;
    }))
    .use(coffee())
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both plugins accept all the options their respective underlying plugins do. Check the docs, if in doubt.&lt;/p&gt;

&lt;h3 id=&#34;were-to-go-from-here&#34;&gt;Were to go from here&lt;/h3&gt;

&lt;p&gt;This time, we learnt, how to write out own little plugin and set up the rest of the &amp;ldquo;basic&amp;rdquo; plugins. I didn&amp;rsquo;t include any styles here, as that would be beyond the scope of this tutorial, and with the static assets in place now, you can simply add them yourself.&lt;/p&gt;

&lt;p&gt;From here, you can go anywhere with a little JavaScript, so next time I will show an example, of a more complex plugin and hopefully you will fully understand the Metalsmith ecosystem.&lt;/p&gt;

&lt;p&gt;The full source code for this part of the tutorial can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/tree/END-OF-PART-3&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metalsmith Part 2: Shaping The Metal</title>
      <link>https://robinthrift.com/post/metalsmith-part-2-shaping-the-metal/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/metalsmith-part-2-shaping-the-metal/</guid>
      <description>

&lt;p&gt;In my last &lt;a href=&#34;http://www.robinthrift.com/posts/metalsmith-part-1-setting-up-the-forge/&#34;&gt;post&lt;/a&gt; I talked about the basic structure of a Metalsmith project and showed you the basics, like templating and plugin installation/configuration. This time we are going to delve further into the subject and look at some Metalsmith internals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The full source code for this part of the tutorial can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/tree/END-OF-PART-2&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;content-types&#34;&gt;Content Types&lt;/h3&gt;

&lt;p&gt;Firstly we will need to determine, what kind of content we want to create, or rather, its type. Wordpress by default gives you two options: posts and pages. Posts are blog posts, so articles that are added regularly and pages are content that doesn&amp;rsquo;t change very often, like contact or about pages. This separation is simple enough so we will use it for now, feel free to add any extra types you will need.&lt;/p&gt;

&lt;p&gt;Unlike something like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; Metalsmith does not have a built in &amp;ldquo;static&amp;rdquo; page and &amp;ldquo;dynamic&amp;rdquo; post mechanism, all files are treated (and created) equal. This has advantages and disadvantages, but I think it makes Metalsmith very flexible.&lt;/p&gt;

&lt;p&gt;Firstly, create a new folder for each content type in the &lt;code&gt;src/content&lt;/code&gt; folder. Let&amp;rsquo;s start with an example about page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: About
template: page.hbt
---
Tell the world something about yourself here!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this to &lt;code&gt;src/content/pages/about.md&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;template-partials&#34;&gt;Template Partials&lt;/h4&gt;

&lt;p&gt;At this stage we should also create partials for the head and foot section of our template, so we don&amp;rsquo;t have to copy and paste it every time and can simply create a menu or logo that will appear on every page. Every templating engine handles partials differently, so I will only quickly go over my Handlebars version here:&lt;/p&gt;

&lt;p&gt;I simply added this to my &lt;code&gt;index.js&lt;/code&gt; and added a &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/blob/58ba1d06938cc5fae76a070bd09fb03913474673/templates/partials/header.hbt&#34;&gt;header.hbt&lt;/a&gt; and &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/blob/58ba1d06938cc5fae76a070bd09fb03913474673/templates/partials/footer.hbt&#34;&gt;footer.hbt&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ...
Handlebars = require(&#39;handlebars&#39;),
fs         = require(&#39;fs&#39;);

Handlebars.registerPartial(&#39;header&#39;, fs.readFileSync(__dirname + &#39;/templates/partials/header.hbt&#39;).toString());
Handlebars.registerPartial(&#39;footer&#39;, fs.readFileSync(__dirname + &#39;/templates/partials/footer.hbt&#39;).toString());
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Full diff can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/commit/58ba1d06938cc5fae76a070bd09fb03913474673&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see I created a new sub folder in my &lt;code&gt;templates/&lt;/code&gt; folder named &lt;code&gt;partials&lt;/code&gt; with the two partial templates containing the wrapping HTML for our content.&lt;/p&gt;

&lt;h3 id=&#34;creating-content-templates&#34;&gt;Creating Content Templates&lt;/h3&gt;

&lt;p&gt;Now that we have set up our partials it&amp;rsquo;s time to add the page template (as required by the &amp;ldquo;template&amp;rdquo;-key in &lt;code&gt;about.md&lt;/code&gt;), so go ahead and create a &lt;code&gt;page.hbt&lt;/code&gt; in the &lt;code&gt;templates/&lt;/code&gt; folder. We won&amp;rsquo;t do anything special here, just print the title and content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-handlebars&#34;&gt;{{&amp;gt; header}}
&amp;lt;h2&amp;gt;{{title}}&amp;lt;/h2&amp;gt;

&amp;lt;article&amp;gt;
    {{{contents}}}
&amp;lt;/article&amp;gt;

{{&amp;gt; footer}}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note--small&#34;&gt;The `{{&gt; header}}` and `{{&gt; footer}}` are including the partials we defined in our `index.js`&lt;/div&gt;

&lt;p&gt;When you build your project again, you will find an &lt;code&gt;about.html&lt;/code&gt;-file under &lt;code&gt;build/content/pages/&lt;/code&gt;, just as expected.&lt;/p&gt;

&lt;h3 id=&#34;files-and-paths&#34;&gt;Files and Paths&lt;/h3&gt;

&lt;p&gt;As you might have noticed, Metalsmith replicates the input folder structure in our output folder (&lt;code&gt;build/&lt;/code&gt;). When you run Metalsmith, it looks though your source folder and creates an internal representation for every file, including it&amp;rsquo;s contents and path. It also populates every internal file object with the metadata you pass it in the YAML front-matter. We end up with an object where each key is the file&amp;rsquo;s path and each file object looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &#39;title&#39;: &#39;FROM_THE_TITLE_KEY&#39;,
    &#39;template&#39;: &#39;TEMPLATE_NAME&#39;,
    &#39;contents&#39;: &amp;lt;Buffer()&amp;gt;,
    &#39;mode&#39;: &#39;HEX_FILE_PERM_CODE&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see it&amp;rsquo;s a very simple and intuitive structure that makes it easy to work with the files and write plugins. But you are not limited to modifying only the files themselves, you can also alter the file list, deleting or adding files (including virtual ones).&lt;/p&gt;

&lt;h3 id=&#34;link-structure&#34;&gt;Link Structure&lt;/h3&gt;

&lt;p&gt;If we leave or site like this, we will have links that look like this: &amp;ldquo;hostname/content/pages/about.html&amp;rdquo;, but wouldn&amp;rsquo;t it be much nicer (and search engine friendlier) to have a link structure like this: &amp;ldquo;hostname/pages/about&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;To achieve this we will need two more Metalsmith plugins: &lt;a href=&#34;https://github.com/segmentio/metalsmith-collections&#34;&gt;metalsmith-collections&lt;/a&gt; and &lt;a href=&#34;https://github.com/segmentio/metalsmith-permalinks&#34;&gt;metalsmith-permalinks&lt;/a&gt;, so install those and save them to your dependencies. Now we will use these two plugins together to achieve our desired result:&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s modify our &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
    collections = require(&#39;metalsmith-collections&#39;),
    permalinks  = require(&#39;metalsmith-permalinks&#39;),
//...

Metalsmith(__dirname)
    .use(collections())
    .use(permalinks())
    //...
    .build()

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Full diff can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/commit/d72b5c4fde8956eefdf92f5c0736cb4d8795998c&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;collections()&lt;/code&gt; function creates a new array for each collection it can find and lists them in the internal metadata (not the file metadata), which then can be accessed in the templates under &lt;code&gt;collections.COLLECTION_NAME&lt;/code&gt;. There are two ways to create collections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a &amp;ldquo;collections&amp;rdquo; key to a files YAML front-matter&lt;/li&gt;
&lt;li&gt;file path pattern matching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first option is the quickest, but only allows you to add your content to one collection at a time and is easy to forget. The second option is extremely flexible and safer, so we&amp;rsquo;ll be going with that. So let us add some patterns for our content types:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
.use(collections({
    pages: {
        pattern: &#39;content/pages/*.md&#39;
    }
}))
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Metalsmith will now create a collection for our pages. While it may seem silly to create a collection for our pages it will come in useful when we are constructing our permalinks and when you want to construct a sitemap. For now let&amp;rsquo;s continue with our permalinks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
.use(permalinks({
    pattern: &#39;:collection/:title&#39;
}))
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note--small&#34;&gt;Make sure to call this after the `markdown()` plugin!&lt;/div&gt;

&lt;p&gt;If you run your build script now, you won&amp;rsquo;t find an &lt;code&gt;about.html&lt;/code&gt; but instead a folder named &amp;ldquo;about&amp;rdquo; in the &lt;code&gt;pages/&lt;/code&gt; folder with an &lt;code&gt;index.html&lt;/code&gt; file. This will result in a link that looks like this: &amp;ldquo;hostname/pages/about&amp;rdquo;, just like we wanted.&lt;/p&gt;

&lt;p&gt;We can do the same for our posts. So let&amp;rsquo;s create a simple posts called &amp;ldquo;First Post&amp;rdquo; in &lt;code&gt;src/content/posts/first-post.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;First Post&amp;quot;
date: 2014-04-18
template: post.hbt
---
This is an amazing blogpost!
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note--small&#34;&gt;You will need to also create a post template (you can use the same as for the page for now)&lt;/div&gt;

&lt;p&gt;Now we just need to extend the options object for the collections function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//...
.use(collections({
    pages: {
        pattern: &#39;content/pages/*.md&#39;
    },
    posts: {
        pattern: &#39;content/posts/*.md&#39;,
        sortBy: &#39;date&#39;,
        reverse: true
    }
}))
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Full diff can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/commit/12c88cd4845fe6e6043766f50af552a5ead8cbde&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we make use of metalsmith-collections options to sort the posts by date and reverse the order, so the newest are first.&lt;/p&gt;

&lt;h3 id=&#34;collections-in-templates&#34;&gt;Collections in Templates&lt;/h3&gt;

&lt;p&gt;Our collections are kind of useless (except for the permalinks) without displaying them, so let&amp;rsquo;s change that. We are going to add a page that lists all of our blog posts, so create a file called &lt;code&gt;blog.md&lt;/code&gt; in your &lt;code&gt;src/content/pages&lt;/code&gt; folder and add the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: Blog
template: blog.hbt
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And create the template (&lt;code&gt;templates/blog.hbt&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-handlebars&#34;&gt;{{&amp;gt; header}}
&amp;lt;h2&amp;gt;{{title}}&amp;lt;/h2&amp;gt;

&amp;lt;article&amp;gt;
    &amp;lt;ul&amp;gt;
        {{#each collections.posts}}
            &amp;lt;li&amp;gt;
                &amp;lt;h3&amp;gt;{{this.title}}&amp;lt;/h3&amp;gt;
                &amp;lt;article&amp;gt;{{this.contents}}&amp;lt;/article&amp;gt;
            &amp;lt;/li&amp;gt;
        {{/each}}
    &amp;lt;/ul&amp;gt;
&amp;lt;/article&amp;gt;

{{&amp;gt; footer}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have a list of all your articles ordered by date, newest first.&lt;/p&gt;

&lt;h3 id=&#34;keep-the-flame-going&#34;&gt;Keep the Flame going&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s all for now, but next time we will expand our knowledge on collections, look into pagination and have some more fun with Metalsmith&amp;rsquo;s internals.&lt;/p&gt;

&lt;p&gt;The full source code for this part of the tutorial can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/tree/END-OF-PART-2&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;update&#34;&gt;Update:&lt;/h5&gt;

&lt;p&gt;You can find the next post in this series here: &lt;a href=&#34;https://robinthrift.com/post/metalsmith-part-3-refining-our-tools/&#34;&gt;Metalsmith Part 3: Refining Our Tools&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metalsmith Part 1: Setting Up the Forge</title>
      <link>https://robinthrift.com/post/metalsmith-part-1-setting-up-the-forge/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/metalsmith-part-1-setting-up-the-forge/</guid>
      <description>

&lt;p&gt;In my &lt;a href=&#34;https://robinthrift.com/post/getting-to-know-metalsmith/&#34;&gt;last article&lt;/a&gt; I gave a brief introduction to &lt;a href=&#34;http://www.metalsmith.io/&#34;&gt;Metalsmith&lt;/a&gt;, a simple, pluggable static site generator written in JavaScript. In this tutorial I want to show, what a basic folder structure for Metalsmith could look like and we will also set up the basic build script.&lt;/p&gt;

&lt;p&gt;The source code for this tutorial can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/tree/END-OF-PART-1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;side-note&#34;&gt;You will need Node.js and NPM. To find out, how to install them check the &lt;a href=&#34;http://nodejs.org/&#34;&gt;official documentation&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;collecting-the-materials&#34;&gt;Collecting the Materials&lt;/h3&gt;

&lt;p&gt;I usually start every project by thinking about the basic folder structure. A good folder setup is key to keep your files organised and maintainable. For our purposes I think the following structure will do the job:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|– src/
    |– content/
    |– images/
    |– styles/
    |_ scripts/
|– templates/
|   |_ partials/
|– config.json
|– index.js
|_ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start at the bottom: The &lt;code&gt;package.json&lt;/code&gt; will hold our dependencies which we&amp;rsquo;ll be setting up now. For this simple example we will only need a few packages, namely Metalsmith. You can either add it to your &lt;code&gt;package.json&lt;/code&gt; under the &lt;code&gt;dependencies&lt;/code&gt; or &lt;code&gt;devDependencies&lt;/code&gt; key, but I usually just use the command line to install the package and save it as a dependency at the same time. If you choose to add them manually to the &lt;code&gt;package.json&lt;/code&gt; don&amp;rsquo;t forget to run &lt;code&gt;npm install&lt;/code&gt; to install all your dependencies once you&amp;rsquo;ve declared them.&lt;/p&gt;

&lt;p&gt;So let us go ahead and install Metalsmith. Using the command line execute the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save-dev metalsmith
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create the actual build file which will contain the instructions on how to generate our site. I will call this &lt;code&gt;index.js&lt;/code&gt; but you could also call it &lt;code&gt;build.js&lt;/code&gt; or something along those lines (index.js is often the &amp;ldquo;default&amp;rdquo; for node projects). We&amp;rsquo;ll start with some boilerplate code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var Metalsmith = require(&#39;metalsmith&#39;);


Metalsmith(__dirname)
    .destination(&#39;./build&#39;)
    .build()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this code doesn&amp;rsquo;t do anything except copy the files from &lt;code&gt;src/&lt;/code&gt; to &lt;code&gt;build/&lt;/code&gt; it does give us a good starting point at least. Metalsmith will look for a folder named &lt;code&gt;src&lt;/code&gt; in the given directory. You could change the source folder by calling the &lt;code&gt;source()&lt;/code&gt; method and passing it a directory name. Here we are using a variable set by node that will point to the directory our build file is in. Then we set the destination folder using the &lt;code&gt;destination()&lt;/code&gt; method, and then tell Metalsmith to run by calling &lt;code&gt;build()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;adding-some-content&#34;&gt;Adding some Content&lt;/h3&gt;

&lt;p&gt;As I said before, our script is pretty much useless right now, so let&amp;rsquo;s add some content. Create a file name &lt;code&gt;index.md&lt;/code&gt; in the &lt;code&gt;src/&lt;/code&gt; directory and fill it with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: Home
---
Hi, this is my start page; neat ain&#39;t it? ;)

### Some info!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first block enclosed by the &lt;code&gt;---&lt;/code&gt; is YAML front-matter, a simple format used to associate metadata with the file that Metalsmith parses and can then be used by plugins. In this example we are telling Metalsmith that the title of the page is &amp;ldquo;Home&amp;rdquo;, nothing too useful yet. What follows after the front-matter is markdown which we&amp;rsquo;ll be easily able to convert to HTML.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are not familiar with markdown check out &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;this&lt;/a&gt; guide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To do so we will first need to install the markdown plugin for metalsmith, conveniently named &lt;code&gt;metalsmith-markdown&lt;/code&gt;. So go ahead and add it to your &lt;code&gt;package.json&lt;/code&gt; or install it via the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save-dev metalsmith-markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we simply need to require it and call it in our build file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var Metalsmith = require(&#39;metalsmith&#39;),
    markdown   = require(&#39;metalsmith-markdown&#39;);


Metalsmith(__dirname)
    .use(markdown())
    .destination(&#39;./build&#39;)
    .build() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the build script now (&lt;code&gt;node index&lt;/code&gt;) you will find a file named &lt;code&gt;index.html&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; directory. As you can see it&amp;rsquo;s super easy to add plugins to Metalsmith and customise the way your files are processed. If you have ever worked with &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; or &lt;a href=&#34;http://expressjs.com/&#34;&gt;express.js&lt;/a&gt; this will look very familiar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; Some versions of Metalsmith require a callback on the build method.  If the code above doesn&amp;rsquo;t create the &lt;code&gt;build&lt;/code&gt; directory, change &lt;code&gt;.build()&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    .build(function (err) { if(err) console.log(err) })
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;shaping-your-content&#34;&gt;Shaping Your Content&lt;/h3&gt;

&lt;p&gt;Of course rendered markdown is not enough to make a full website. In this next step we will add some templates to wrap our content. For this we will use another Metalsmith plugin cleverly called &lt;code&gt;metalsmith-templates&lt;/code&gt;. As before go ahead and install it and add it to your build script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save-dev metalsmith-templates
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var Metalsmith = require(&#39;metalsmith&#39;),
    markdown   = require(&#39;metalsmith-markdown&#39;),
    templates  = require(&#39;metalsmith-templates&#39;);


Metalsmith(__dirname)
    .use(markdown())
    .use(templates())
    .destination(&#39;./build&#39;)
    .build()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the markdown plugin we simply pass the &lt;code&gt;templates()&lt;/code&gt; function to the &lt;code&gt;use()&lt;/code&gt; method to tell Metalsmith to use this plugin. However we are still missing some key parts for this to work, firstly some templates and a templating engine. &lt;code&gt;metalsmith-templates&lt;/code&gt; is build on top of &lt;a href=&#34;https://github.com/visionmedia/consolidate.js&#34;&gt;consolidate.js&lt;/a&gt;, which gives us tons of engines to choose from. I will go with &lt;a href=&#34;http://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt; but you could also choose &lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt; or &lt;a href=&#34;http://paularmstrong.github.io/swig/&#34;&gt;Swig&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to install our engine and tell &lt;code&gt;metalsmith-templates&lt;/code&gt; which engine to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save-dev handlebars
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ...
.use(templates(&#39;handlebars&#39;))
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to create a simple template in the &lt;code&gt;templates/&lt;/code&gt; folder, so create a file called &lt;code&gt;home.hbt&lt;/code&gt; (or whatever extension your engine uses) and fill it with some templating goodness:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-handlebars&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;{{ title }} | Metalsmith Page&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;main-wrapper&amp;quot;&amp;gt;
        {{{ contents }}}
    &amp;lt;/div&amp;gt;
    
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have to tell Metalsmith which template we want to use wrap the index.md, so we add a &amp;ldquo;template&amp;rdquo; key to the YAML front-matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Home
template: home.hbt
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run you build script et voilà, a wrapped index.html in our &lt;code&gt;build/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h4 id=&#34;turn-the-heat-up&#34;&gt;Turn the heat up&lt;/h4&gt;

&lt;p&gt;Next time I will dive more into the inner workings of Metalsmith and I will show you how to work with collections, multiple types of content and how to further structure your project.&lt;/p&gt;

&lt;p&gt;Take some time and experiment with Metalsmith and read the docs over at &lt;a href=&#34;http://www.metalsmith.io/&#34;&gt;Metalsmith.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The source code for this tutorial can be found &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-tutorial/tree/END-OF-PART-1&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;update&#34;&gt;Update:&lt;/h5&gt;

&lt;p&gt;You can find the next post in this series here: &lt;a href=&#34;https://robinthrift.com/post/metalsmith-part-2-shaping-the-metal/&#34;&gt;Metalsmith Part 2 : Shaping The Metal&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting To Know Metalsmith</title>
      <link>https://robinthrift.com/post/getting-to-know-metalsmith/</link>
      <pubDate>Sun, 13 Apr 2014 00:00:00 +0100</pubDate>
      
      <guid>https://robinthrift.com/post/getting-to-know-metalsmith/</guid>
      <description>

&lt;p&gt;There are dozens of static site generators out there. The most popular is probably &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, and for good reasons! It&amp;rsquo;s super easy to set up, has a lot of great features built in and there are a loads of plugins floating around. It&amp;rsquo;s also the engine powering &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, GitHub&amp;rsquo;s static site hosting for projects and users (this site too, is hosted on GH-Pages, you can find the source code &lt;a href=&#34;https://github.com/RobinThrift/RobinThrift.com&#34;&gt;here&lt;/a&gt;). Static sites make it super easy to version control your site and also let others contribute to your site (fork it and fix my typos ;) ), as well as learn from it.&lt;/p&gt;

&lt;p&gt;I built a few websites using Jekyll, but as my ruby-fu&amp;trade; is quite limited I had a few problems when it came to plugins, especially developing my own, also I didn&amp;rsquo;t like to depend on ruby, but I guess that&amp;rsquo;s just me being the JS guy I am. Although I plan on learning ruby in-depth at some stage, I&amp;rsquo;m not there yet. Also I simply wanted to try something new, preferably JavaScript based.&lt;/p&gt;

&lt;p&gt;Recently I&amp;rsquo;ve been using &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp.js&lt;/a&gt; for all of my build scripts and I thought about using that. While I certainly could have done so, I don&amp;rsquo;t think it would have been very elegant. I like the way Gulp works, for projects like web apps, as it&amp;rsquo;s very flexible. For static sites/blogs however, it didn&amp;rsquo;t feel quite right. Of course there are tons of JS-based static site generators out there, but most weren&amp;rsquo;t quite what I was looking for. &lt;a href=&#34;http://assemble.io/&#34;&gt;Assemble.io&lt;/a&gt; seems quite powerful but I couldn&amp;rsquo;t quite get myself to like it. I don&amp;rsquo;t think the structure of the website/docs are very good for beginners.&lt;/p&gt;

&lt;p&gt;This is were Metalsmith comes in.&lt;/p&gt;

&lt;h3 id=&#34;forging-with-javascript&#34;&gt;Forging with JavaScript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metalsmith.io/&#34;&gt;Metalsmith&lt;/a&gt; by the guys over at &lt;a href=&#34;https://segment.io/&#34;&gt;Segment.io&lt;/a&gt; is &amp;ldquo;an extremely simple, pluggable static site generator&amp;rdquo;. What that means is, is that everything is a plugin. There&amp;rsquo;s a very small core which creates a list of files for your plugins to work with (similar to Gulp). You give it a source directory and then tell it which plugins to use; if you know &lt;a href=&#34;http://expressjs.com/&#34;&gt;express.js&lt;/a&gt; or have used Gulp before, this will look very familiar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Metalsmith(__dirname)
    .use(markdown())
    .use(templates(&#39;handlebars&#39;))
    .build();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line simply creates a new instance of the Metalsmith object which looks for a folder named &lt;code&gt;src&lt;/code&gt; in the given directory, &lt;code&gt;__dirname/src&lt;/code&gt; in this case. We then specify two plugins that will process the input files found in the source directory. The fist one is &lt;code&gt;markdown()&lt;/code&gt;, which processes markdown files (eg *.md) and converts them into .html files.&lt;/p&gt;

&lt;p&gt;Metalsmith will also parse any YAML front-matter at the top of every file, which acts as metadata, e. g. title, date and template.&lt;/p&gt;

&lt;p&gt;The second plugin is &lt;code&gt;templates()&lt;/code&gt;, a thin wrapper on top of &lt;a href=&#34;https://github.com/visionmedia/consolidate.js&#34;&gt;consolidate.js&lt;/a&gt; used to render the templates specified in the YAML front-matter. The argument you pass in is the engine that consolidate.js will use, so you can use any templating engine you like, i. e. Jade, Handlebars, Swig, etc.&lt;/p&gt;

&lt;p&gt;Immediately you can see how flexible and modular Metalsmith is, while at the same time being elegant and very, very easy to develop for and work with.&lt;/p&gt;

&lt;p&gt;In this series I will go over my experiences with Metalsmith and how I built this website. I want to cover everything from simple beginner topics like file structure to more advanced usage and plugin development, like my &lt;a href=&#34;https://github.com/RobinThrift/metalsmith-paginate&#34;&gt;pagination plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join me next time when I will go over the file structure and basic setup.&lt;/p&gt;

&lt;h4 id=&#34;update-tutorials-posted&#34;&gt;Update: Tutorials Posted&lt;/h4&gt;

&lt;p&gt;I have started writing the tutorials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://robinthrift.com/post/metalsmith-part-1-setting-up-the-forge/&#34;&gt;Metalsmith Part 1: Setting Up the Forge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://robinthrift.com/post/metalsmith-part-2-shaping-the-metal/&#34;&gt;Metalsmith Part 2 : Shaping The Metal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://robinthrift.com/post/metalsmith-part-3-refining-our-tools/&#34;&gt;Metalsmith Part 3: Refining Our Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>